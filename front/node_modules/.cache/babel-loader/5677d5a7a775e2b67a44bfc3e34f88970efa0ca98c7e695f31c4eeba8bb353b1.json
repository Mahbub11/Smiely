{"ast":null,"code":"import { combineReducers, configureStore, createStore } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import {persistStore,persistReducer}  from 'redux-persist'\n// import { rootPersistConfig, rootReducer } from './rootReducer';\n// slices\nimport appReducer from './slices/app';\nimport authReducer from './slices/auth';\nimport userDetailsReducer from './slices/user';\nimport postReducer from './slices/post';\nimport { composeWithDevTools } from '@redux-devtools/extension';\nimport { applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\n// const store=configureStore({\n//     reducer:persistReducer(rootPersistConfig, rootReducer),\n//     middleware:(getDefaultMiddleware)=>\n//     getDefaultMiddleware({\n//         serializableCheck:false,\n//         immutableCheck:false\n//     })\n// })\n\n// const persistor=persistStore(store);\n// const {dispatch} =store;\n//  const useAppSelector= useSelector;\n\n//  const useAppDispatch=()=> useDispatch();\n\n// export{ store,persistor,dispatch,useAppSelector,useAppDispatch}\n\nconst rootReducer = combineReducers({\n  app: appReducer,\n  auth: authReducer,\n  userDetails: userDetailsReducer,\n  post: postReducer\n});\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\nexport { store };","map":{"version":3,"names":["combineReducers","configureStore","createStore","useDispatch","useSelector","appReducer","authReducer","userDetailsReducer","postReducer","composeWithDevTools","applyMiddleware","thunk","rootReducer","app","auth","userDetails","post","store"],"sources":["C:/Users/mahbu/Documents/MERN/SMIELY/frontend/src/redux/store.js"],"sourcesContent":["import { combineReducers, configureStore, createStore } from \"@reduxjs/toolkit\";\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\n// import {persistStore,persistReducer}  from 'redux-persist'\r\n// import { rootPersistConfig, rootReducer } from './rootReducer';\r\n// slices\r\nimport appReducer from './slices/app';\r\nimport authReducer from './slices/auth';\r\nimport userDetailsReducer from './slices/user';\r\nimport postReducer from './slices/post';\r\nimport { composeWithDevTools } from '@redux-devtools/extension';\r\nimport {  applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// const store=configureStore({\r\n//     reducer:persistReducer(rootPersistConfig, rootReducer),\r\n//     middleware:(getDefaultMiddleware)=>\r\n//     getDefaultMiddleware({\r\n//         serializableCheck:false,\r\n//         immutableCheck:false\r\n//     })\r\n// })\r\n\r\n// const persistor=persistStore(store);\r\n// const {dispatch} =store;\r\n//  const useAppSelector= useSelector;\r\n\r\n\r\n//  const useAppDispatch=()=> useDispatch();\r\n\r\n// export{ store,persistor,dispatch,useAppSelector,useAppDispatch}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth:authReducer,\r\n    userDetails:userDetailsReducer,\r\n    post:postReducer\r\n    \r\n  });\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport {store};"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC/E,SAASC,WAAW,EAACC,WAAW,QAAQ,aAAa;AACrD;AACA;AACA;AACA,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,kBAAkB,MAAM,eAAe;AAC9C,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAAUC,eAAe,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,aAAa;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;;AAGA,MAAMC,WAAW,GAAGZ,eAAe,CAAC;EAChCa,GAAG,EAAER,UAAU;EACfS,IAAI,EAACR,WAAW;EAChBS,WAAW,EAACR,kBAAkB;EAC9BS,IAAI,EAACR;AAEP,CAAC,CAAC;AACF,MAAMS,KAAK,GAAGf,WAAW,CACvBU,WAAW,EACXH,mBAAmB,CAACC,eAAe,CAACC,KAAK,CAAC,CAC9C,CAAC;AAED,SAAQM,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}