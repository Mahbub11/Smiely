{"ast":null,"code":"// import { showSnackbar } from \"./app\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"../../utils/axios\";\nimport { API_LEVEL } from \"../../config\";\nconst initialState = {\n  loading: true,\n  error: null,\n  chat: [],\n  chatUserList: []\n};\nconst slice = createSlice({\n  name: \"chat\",\n  initialState,\n  reducers: {\n    newChatRequest: state => {\n      state.loading = true;\n    },\n    newChatRequestSuccess: (state, action) => {\n      state.loading = false;\n      state.chat = action.payload.payload;\n    },\n    newChatRequestFail: (state, action) => {\n      state.loading = false;\n      state.error = action.payload.payload;\n    },\n    chatUserListRequest: state => {\n      state.loading = true;\n    },\n    chatUserListRequestSuccess: (state, action) => {\n      state.loading = false;\n      state.chatUserLi = action.payload.payload;\n    },\n    chatUserListFail: (state, action) => {\n      state.loading = false;\n      state.error = action.payload.payload;\n    }\n  }\n});\n\n// export the slice of reducer\nexport default slice.reducer;\nexport const addNewChat = userId => async dispatch => {\n  try {\n    dispatch(slice.actions.newChatRequest);\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true\n    };\n    const {\n      data\n    } = await axios.post(`${API_LEVEL}/message/newChat`, {\n      receiverId: userId\n    }, config);\n    dispatch(slice.actions.newChatRequestSuccess({\n      payload: data.newChat\n    }));\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n    dispatch(slice.actions.newChatRequestFail({\n      payload: error.message\n    }));\n  }\n};\nexport const getMyChatList = userId => async dispatch => {\n  try {\n    dispatch(slice.actions.newChatRequest);\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true\n    };\n    const {\n      data\n    } = await axios.get(`${API_LEVEL}/message/chatList`, config);\n\n    //   dispatch(slice.actions.newChatRequestSuccess({\n    //     payload: data.newChat\n    //   }));\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n    dispatch(slice.actions.newChatRequestFail({\n      payload: error.message\n    }));\n  }\n};","map":{"version":3,"names":["createSlice","axios","API_LEVEL","initialState","loading","error","chat","chatUserList","slice","name","reducers","newChatRequest","state","newChatRequestSuccess","action","payload","newChatRequestFail","chatUserListRequest","chatUserListRequestSuccess","chatUserLi","chatUserListFail","reducer","addNewChat","userId","dispatch","actions","config","header","withCredentials","data","post","receiverId","newChat","console","log","message","getMyChatList","get"],"sources":["C:/Users/mahbu/Documents/MERN/SMIELY/frontend/src/redux/slices/chat.js"],"sourcesContent":["// import { showSnackbar } from \"./app\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"../../utils/axios\";\r\nimport { API_LEVEL } from \"../../config\";\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  error: null,\r\n  chat:[],\r\n  chatUserList:[]\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"chat\",\r\n  initialState,\r\n  reducers: {\r\n    newChatRequest: (state) => {\r\n      state.loading = true;\r\n    },\r\n    newChatRequestSuccess: (state, action) => {\r\n      state.loading = false;\r\n      state.chat = action.payload.payload;\r\n    },\r\n    newChatRequestFail: (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload.payload;\r\n    },\r\n    chatUserListRequest: (state) => {\r\n        state.loading = true;\r\n      },\r\n      chatUserListRequestSuccess: (state, action) => {\r\n        state.loading = false;\r\n        state.chatUserLi = action.payload.payload;\r\n      },\r\n      chatUserListFail: (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload.payload;\r\n      },\r\n\r\n   \r\n\r\n  },\r\n});\r\n\r\n// export the slice of reducer\r\nexport default slice.reducer;\r\n\r\nexport const addNewChat = (userId) => async (dispatch) => {\r\n\r\n  try {\r\n\r\n    dispatch(slice.actions.newChatRequest);\r\n    const config = { header: { \"Content-Type\": \"application/json\" },withCredentials:true }\r\n    const { data } = await axios.post(`${API_LEVEL}/message/newChat`, { receiverId: userId }, config);\r\n\r\n    dispatch(slice.actions.newChatRequestSuccess({\r\n      payload: data.newChat\r\n    }));\r\n    console.log(data)\r\n\r\n} catch (error) {\r\n  console.log(error);\r\n  dispatch(\r\n    slice.actions.newChatRequestFail({\r\n      payload: error.message,\r\n    })\r\n  );\r\n}\r\n}\r\nexport const getMyChatList = (userId) => async (dispatch) => {\r\n\r\n    try {\r\n  \r\n      dispatch(slice.actions.newChatRequest);\r\n      const config = { header: { \"Content-Type\": \"application/json\" },withCredentials:true }\r\n      const { data } = await axios.get(`${API_LEVEL}/message/chatList`, config);\r\n  \r\n    //   dispatch(slice.actions.newChatRequestSuccess({\r\n    //     payload: data.newChat\r\n    //   }));\r\n      console.log(data)\r\n  \r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch(\r\n      slice.actions.newChatRequestFail({\r\n        payload: error.message,\r\n      })\r\n    );\r\n  }\r\n  \r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}